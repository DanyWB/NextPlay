// cron/send_rpe_requests.js

const {Bot} = require("grammy");
const db = require("../services/db");
require("dotenv").config();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Bot(BOT_TOKEN);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CATEGORIES = [5272, 5273, 5274, 3792, 3793, 3794];

// --- MAIN LOGIC ---
console.log(`[${new Date().toISOString()}] ==== RPE CRON –ó–ê–ü–£–©–ï–ù ====`);
(async () => {
  try {
    const now = new Date();
    const hour = now.getHours();
    const isMorning = hour < 12;

    const fromDate = new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000);

    // –õ–æ–≥: –∫–æ–≥–¥–∞ –∏—â–µ–º —Å–µ—Å—Å–∏–∏
    console.log(
      `–ò—â–µ–º athlete_session —Å category=${CATEGORIES.join(
        ", "
      )} –ø–æ—Å–ª–µ ${fromDate.toISOString()}`
    );

    const sessions = await db("athlete_session")
      .select(
        "athlete_session.athlete",
        "athlete_session.teamsession",
        "athlete_session.total_time",
        "team_session.start_timestamp"
      )
      .join("team_session", "athlete_session.teamsession", "team_session.id")
      .whereIn("team_session.category", CATEGORIES)
      .andWhere("team_session.start_timestamp", ">=", fromDate.toISOString())
      .orderBy("team_session.start_timestamp", "desc");

    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${sessions.length}`);

    let sent = 0,
      skipped = 0,
      notFound = 0;

    for (const sess of sessions) {
      const already = await db("athlete_rpe")
        .where({athlete_id: sess.athlete, team_session_id: sess.teamsession})
        .first();
      if (already) {
        skipped++;
        continue;
      }

      // –ò—â–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await db("users").where({athlete_id: sess.athlete}).first();
      if (!user || !user.id) {
        notFound++;
        console.log(
          `[SKIP] –ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è athlete_id=${sess.athlete}`
        );
        continue;
      }

      let duration = null;
      if (sess.total_time)
        duration = Math.round((sess.total_time / 60) * 100) / 100;

      const sessionDate = sess.start_timestamp.toLocaleString
        ? sess.start_timestamp.toLocaleString()
        : sess.start_timestamp;
      const text =
        `üü† –û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∑–∞ —Å–µ—Å—Å–∏—é (${sessionDate})\n\n` +
        `–ü–æ —à–∫–∞–ª–µ –ë–æ—Ä–≥–∞ 0‚Äì10 (0 ‚Äî –æ—á–µ–Ω—å –ª–µ–≥–∫–æ, 10 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç—è–∂–µ–ª–æ).\n\n` +
        (duration ? `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω.\n\n` : "") +
        (isMorning
          ? "–û—Ç–≤–µ—Ç—å—Ç–µ –¥–æ 18:00 —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ –≤–∞—à —Å—Ç–∞—Ç—É—Å!"
          : "–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –æ—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–µ—Å—Å–∏—é. –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ ‚Äî –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–Ω–∏–º.");

      const keyboard = {
        inline_keyboard: [
          [0, 1, 2, 3, 4, 5].map((v) => ({
            text: v.toString(),
            callback_data: `rpe_${v}_${sess.teamsession}`,
          })),
          [6, 7, 8, 9, 10].map((v) => ({
            text: v.toString(),
            callback_data: `rpe_${v}_${sess.teamsession}`,
          })),
          [{text: "–ù–µ –æ—Ç–≤–µ—á—É", callback_data: `rpe_skip_${sess.teamsession}`}],
        ],
      };

      try {
        await bot.api.sendMessage(user.id, text, {
          reply_markup: keyboard,
        });
        sent++;
        console.log(
          `[OK] RPE –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω athlete_id=${sess.athlete}, telegram_id=${user.id}, teamsession=${sess.teamsession}`
        );
      } catch (err) {
        console.error(
          `[ERR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è telegram_id=${user.d}:`,
          err.description || err
        );
      }
    }

    console.log(
      `–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}, –ø—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å –æ—Ü–µ–Ω–∫–∞): ${skipped}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ telegram_id: ${notFound}`
    );
    console.log(`[${new Date().toISOString()}] ==== RPE CRON –ó–ê–í–ï–†–®–Å–ù ====`);
    process.exit(0);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ RPE:", err);
    process.exit(1);
  }
})();

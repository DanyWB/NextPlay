const {
  getUnverifiedUsers,
  verifyUser,
  declineUser,
  getUserById,
  getAllClubs,
} = require("../services/userService");
const {
  getAthletesByClubId,
  searchAthletesByName,
  getAthleteById,
} = require("../services/athleteService");
const {
  getVerifyContext,
  updateVerifyContext,
  clearVerifyContext,
} = require("../services/stateService");
const {logAdminAction} = require("../services/logService");

module.exports = (bot) => {
  console.log("‚úÖ verify_action.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...");

  // /verify ‚Äî –Ω–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.command("verify", async (ctx) => {
    const fromId = ctx.from.id;
    const user = await getUserById(fromId);
    if (!user?.is_admin) return ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");

    const unverifiedUsers = await getUnverifiedUsers();
    if (!unverifiedUsers.length)
      return ctx.reply("‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.");

    const buttons = unverifiedUsers.map((u) => [
      {
        text: `${u.username} (${u.id})`,
        callback_data: `verify_select_user_${u.id}`,
      },
    ]);

    await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", {
      reply_markup: {inline_keyboard: buttons},
    });
  });

  // –®–∞–≥ 1: –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.callbackQuery(/^verify_select_user_(\d+)$/, async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    updateVerifyContext(ctx.from.id, {
      stage: "select_club",
      userId,
    });

    const clubs = await getAllClubs();
    const buttons = clubs.map((club) => [
      {
        text: club.name,
        callback_data: `verify_select_club_${userId}_${club.id}`,
      },
    ]);

    buttons.push([
      {
        text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data: `verify_decline_${userId}`,
      },
    ]);

    await ctx.editMessageText(
      `üì• *–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é*\nüë§ Telegram ID: \`${userId}\`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`,
      {
        parse_mode: "Markdown",
        reply_markup: {inline_keyboard: buttons},
      }
    );
  });

  // –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–ª—É–±–∞
  bot.callbackQuery(/^verify_select_club_(\d+)_(\d+)$/, async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    const clubId = parseInt(ctx.match[2]);

    updateVerifyContext(ctx.from.id, {
      stage: "select_athlete",
      userId,
      clubId,
    });

    const athletes = await getAthletesByClubId(clubId);
    if (!athletes.length)
      return ctx.reply("üôÅ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ç–ª–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º –∫–ª—É–±–µ.");

    const buttons = athletes.slice(0, 20).map((athlete) => [
      {
        text: `${athlete.first_name || ""} ${athlete.last_name || ""}`.trim(),
        callback_data: `verify_final_${userId}_${athlete.id}`,
      },
    ]);

    buttons.push([
      {
        text: "üîô –ù–∞–∑–∞–¥",
        callback_data: `verify_back_club_${userId}`,
      },
    ]);

    await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–ª–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:", {
      reply_markup: {inline_keyboard: buttons},
    });
  });

  // –®–∞–≥ 2.1: –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª—É–±–∞
  bot.callbackQuery(/^verify_back_club_(\d+)$/, async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    const clubs = await getAllClubs();

    const clubButtons = clubs.map((club) => [
      {
        text: club.name,
        callback_data: `verify_select_club_${userId}_${club.id}`,
      },
    ]);

    clubButtons.push([
      {
        text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
        callback_data: `verify_decline_${userId}`,
      },
    ]);

    await ctx.editMessageText(
      `üì• *–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é*\nüë§ Telegram ID: \`${userId}\`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`,
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: clubButtons,
        },
      }
    );

    updateVerifyContext(ctx.from.id, {stage: "select_club", userId});
  });

  // –®–∞–≥ 3: –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∞—Ç–ª–µ—Ç—É
  bot.callbackQuery(/^verify_final_(\d+)_(\d+)$/, async (ctx) => {
    const userId = parseInt(ctx.match[1]);
    const athleteId = parseInt(ctx.match[2]);

    await verifyUser(userId, athleteId);
    clearVerifyContext(ctx.from.id);

    const athlete = await getAthleteById(athleteId);

    await ctx.editMessageText(
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \`${userId}\` —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞—Ç–ª–µ—Ç—É *${athlete.first_name} ${athlete.last_name}* (ID: ${athleteId})`,
      {parse_mode: "Markdown"}
    );

    await logAdminAction(
      ctx.from.id,
      `–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∫–∞–∫ –∞—Ç–ª–µ—Ç–∞ ${athleteId}`
    );
  });

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å
  bot.callbackQuery(/^verify_decline_(\d+)$/, async (ctx) => {
    const userId = parseInt(ctx.match[1]);

    await declineUser(userId);
    clearVerifyContext(ctx.from.id);

    await ctx.editMessageText(
      `üö´ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \`${userId}\` –æ—Ç–∫–ª–æ–Ω—ë–Ω.`,
      {parse_mode: "Markdown"}
    );

    await logAdminAction(ctx.from.id, `–û—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  });

  // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ –∞—Ç–ª–µ—Ç–∞
  bot.on("message:text", async (ctx, next) => {
    const state = getVerifyContext(ctx.from.id);
    if (!state || state.stage !== "select_athlete") return await next();

    const query = ctx.message.text.trim();
    if (query.length < 2) {
      return ctx.reply("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.");
    }

    const athletes = await searchAthletesByName(query, state.clubId);
    if (athletes.length === 0) {
      return ctx.reply("üôÅ –ê—Ç–ª–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.");
    }

    const buttons = athletes.slice(0, 20).map((athlete) => [
      {
        text: `${athlete.first_name || ""} ${athlete.last_name || ""}`.trim(),
        callback_data: `verify_final_${state.userId}_${athlete.id}`,
      },
    ]);

    buttons.push([
      {
        text: "üîô –ù–∞–∑–∞–¥",
        callback_data: `verify_back_club_${state.userId}`,
      },
    ]);

    await ctx.reply("üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ç–ª–µ—Ç—ã:", {
      reply_markup: {inline_keyboard: buttons},
    });
  });

  console.log("‚úÖ verify_action.js –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.");
};

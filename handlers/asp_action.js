const {InlineKeyboard, InputFile} = require("grammy");
const {getUser} = require("../services/userService");
const {getAvailableMonths, getAspData} = require("../services/statService");
const {generateChartImage} = require("../utils/chartGenerator");
const {monthsNames} = require("../utils/months");
const {getMonthLabel} = require("../utils/months");
const {formatAspComparison} = require("../utils/aspFormatter");
const {showStatsMenu} = require("../commands/stats");

module.exports = (bot) => {
  // –≠—Ç–∞–ø 1: –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞
  bot.callbackQuery(/^stats_asp$/, async (ctx) => {
    const tgId = ctx.from.id;
    const user = await getUser(tgId);

    if (!user || !user.athlete_id) {
      return ctx.answerCallbackQuery({
        text: "‚ùå –í—ã –µ—â—ë –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /verify_me",
        show_alert: true,
      });
    }

    const months = await getAvailableMonths(user.athlete_id);

    const keyboard = new InlineKeyboard();
    for (const month of months) {
      keyboard.text(month.label, `asp_month_${month.value}`).row();
    }
    keyboard.text("üîô –ù–∞–∑–∞–¥", "stats_back");

    if (ctx.callbackQuery?.message?.text) {
      await ctx.editMessageText("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è ASP:", {
        reply_markup: keyboard,
      });
    } else {
      await ctx.reply("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è ASP:", {
        reply_markup: keyboard,
      });
    }
  });

  // –≠—Ç–∞–ø 3: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
  bot.callbackQuery(/^asp_month_(.+)$/, async (ctx) => {
    const month = ctx.match[1];
    const userId = ctx.from.id;

    await ctx.answerCallbackQuery(); // –∑–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏"

    // ‚úÖ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏:", e.message);
    }

    // ‚úÖ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è..."
    const waitMsg = await ctx.reply("üõ† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

    try {
      const user = await getUser(userId);
      if (!user || !user.athlete_id) {
        return ctx.reply("‚ùå –í—ã –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.");
      }

      const aspData = await getAspData(user.athlete_id, month);
      if (!aspData) {
        return ctx.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.");
      }

      const {image} = await generateChartImage(aspData, "radar");

      const summary = `
  üìä *ASP –∑–∞ ${month}*
  
  ‚è±Ô∏è –ú–∏–Ω—É—Ç –Ω–∞ –ø–æ–ª–µ: *${aspData.minutes}*
  üèÉ‚Äç‚ôÇÔ∏è –°—Ä. –º–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å: *${aspData.avgMaxSpeed.toFixed(1)} –∫–º/—á*
  ‚ö° –°—Ä. –º–∞–∫—Å. —É—Å–∫–æ—Ä–µ–Ω–∏–µ: *${aspData.avgMaxAcc.toFixed(2)} –º/—Å¬≤*
  üõë –°—Ä. –º–∞–∫—Å. —Ç–æ—Ä–º–æ–∂–µ–Ω–∏–µ: *${aspData.avgMaxDec.toFixed(2)} –º/—Å¬≤*
  üìè –î–∏—Å—Ç. Z4-Z5: *${aspData.z4z5Distance.toFixed(1)} –º/–º–∏–Ω*
  `.trim();

      const keyboard = new InlineKeyboard().text(
        "üîô –ù–∞–∑–∞–¥",
        "stats_back_to_months"
      );
      const file = new InputFile(image);

      // ‚úÖ —É–¥–∞–ª—è–µ–º "–ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
      await ctx.api.deleteMessage(ctx.chat.id, waitMsg.message_id);

      // ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await ctx.replyWithPhoto(file, {
        caption: summary,
        reply_markup: keyboard,
        parse_mode: "Markdown",
      });
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ASP:", err);
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
  bot.callbackQuery(/^stats_back$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
    } catch (_) {}

    await showStatsMenu(ctx);
  });

  bot.callbackQuery(/^stats_back_to_months$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
    } catch (_) {}

    // —ç–º—É–ª–∏—Ä—É–µ–º callback 'stats_asp'
    ctx.update.callback_query.data = "stats_asp";
    await bot.handleUpdate(ctx.update);
  });

  // –≠—Ç–∞–ø 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
  bot.callbackQuery("asp_compare", async (ctx) => {
    const user = await getUser(ctx.from.id);
    if (!user || !user.athlete_id) {
      return ctx.answerCallbackQuery({
        text: "‚ùå –í—ã –µ—â—ë –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /verify_me",
        show_alert: true,
      });
    }

    const months = await getAvailableMonths(user.athlete_id);
    const keyboard = new InlineKeyboard();
    for (const m of months) {
      keyboard.text(m.label, `asp_compare_month1_${m.value}`).row();
    }
    keyboard.text("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "asp_compare_reset");
    await ctx.editMessageText("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ *–ø–µ—Ä–≤—ã–π* –º–µ—Å—è—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", {
      reply_markup: keyboard,
      parse_mode: "Markdown",
    });
  });

  // –≠—Ç–∞–ø 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ‚Äî –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Å—è—Ü–∞
  bot.callbackQuery(/^asp_compare_month1_(.+)$/, async (ctx) => {
    const month1 = ctx.match[1];
    ctx.session.aspCompare = {month1};
    const months = await getAvailableMonths(
      (
        await getUser(ctx.from.id)
      ).athlete_id
    );

    const keyboard = new InlineKeyboard();
    for (const m of months) {
      keyboard.text(m.label, `asp_compare_month2_${m.value}`).row();
    }
    keyboard.text("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "asp_compare_reset");

    await ctx.editMessageText(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${getMonthLabel(month1)}*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ *–≤—Ç–æ—Ä–æ–π* –º–µ—Å—è—Ü:`,
      {
        reply_markup: keyboard,
        parse_mode: "Markdown",
      }
    );
  });

  // –≠—Ç–∞–ø 3: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  bot.callbackQuery(/^asp_compare_month2_(.+)$/, async (ctx) => {
    const user = await getUser(ctx.from.id);
    const month1 = ctx.session.aspCompare?.month1;
    const month2 = ctx.match[1];

    if (!month1 || !month2 || !user || !user.athlete_id) {
      return ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    }

    await ctx.answerCallbackQuery();
    await ctx.reply("üìä –°—Ç—Ä–æ–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");

    try {
      const [data1, data2] = await Promise.all([
        getAspData(user.athlete_id, month1),
        getAspData(user.athlete_id, month2),
      ]);

      if (!data1 || !data2) {
        return ctx.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Å—è—Ü–∞–º.");
      }

      const {image} = await generateChartImage(data1, data2);
      const summary = formatAspComparison(
        data1,
        data2,
        getMonthLabel(month1),
        getMonthLabel(month2)
      );

      await ctx.replyWithPhoto(new InputFile(image), {
        caption: summary,
        parse_mode: "HTML",
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ASP:", err);
      await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –°–±—Ä–æ—Å
  bot.callbackQuery("asp_compare_reset", async (ctx) => {
    ctx.session.aspCompare = {};
    return ctx.reply("üîÅ –í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.");
  });
};

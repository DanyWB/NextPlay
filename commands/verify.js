const db = require("../services/db");
const {logUserAction} = require("../services/logService");

module.exports = (bot) => {
  bot.command("verify", async (ctx) => {
    const fromId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –∞–¥–º–∏–Ω?
    const admin = await db("users").where({id: fromId, is_admin: true}).first();
    if (!admin) return ctx.reply("üö´ –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await db("users").whereNull("athlete_id");

    if (users.length === 0) {
      return ctx.reply("üéâ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.");
    }

    const buttons = users.map((u) => {
      let fullName = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ";

      try {
        const meta = u.meta ? JSON.parse(u.meta) : {};
        if (meta.full_name) fullName = meta.full_name;
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ meta:", err);
      }

      return [
        {
          text: `${fullName} (@${u.username || "–±–µ–∑ username"}, ${u.id})`,
          callback_data: `verify_select_user_${u.id}`,
        },
      ];
    });

    await ctx.reply("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", {
      reply_markup: {inline_keyboard: buttons},
    });

    await logUserAction(fromId, "verify_list_users", "listed unverified users");
  });
};

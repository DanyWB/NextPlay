const db = require("../services/db");
const {isVerified, getUser} = require("../services/userService");

module.exports = (bot) => {
  bot.command("verify_me", async (ctx) => {
    const userId = ctx.from.id;
    const user = await getUser(userId);

    if (!user)
      return ctx.reply("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start.");

    const verified = await isVerified(userId);
    if (verified) return ctx.reply("‚úÖ –í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã.");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    // if (user.last_verification_request) {
    //   const lastRequest = new Date(user.last_verification_request);
    //   const now = new Date();
    //   const diffMs = now - lastRequest;
    //   const diffHours = diffMs / (1000 * 60 * 60);

    //   if (diffHours < 2) {
    //     const minutesLeft = Math.ceil((2 - diffHours) * 60);
    //     return ctx.reply(
    //       `‚è≥ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n–ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${minutesLeft} –º–∏–Ω.\n\n‚öñÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_weight`
    //     );
    //   }
    // }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ –§–ò–û
    ctx.session.state = "awaiting_full_name";
    return ctx.reply(
      "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é* —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)",
      {
        parse_mode: "Markdown",
      }
    );
  });

  bot.on("message:text", async (ctx) => {
    if (ctx.session.state !== "awaiting_full_name") return;

    const fullName = ctx.message.text.trim();
    const userId = ctx.from.id;

    if (!/^[A-Za-z–ê-–Ø–∞-—è–Å—ë]+ [A-Za-z–ê-–Ø–∞-—è–Å—ë]+$/.test(fullName)) {
      return ctx.reply(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é *—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª* (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)",
        {
          parse_mode: "Markdown",
        }
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º meta –∏ –¥–∞—Ç—É –∑–∞–ø—Ä–æ—Å–∞
    await db("users")
      .where({id: userId})
      .update({
        last_verification_request: new Date().toISOString(),
        meta: JSON.stringify({full_name: fullName}),
      });

    ctx.session.state = null;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ?
    const userMetaCheck = await db("users").where({id: userId}).first();
    let parsedMeta;
    try {
      parsedMeta = userMetaCheck.meta ? JSON.parse(userMetaCheck.meta) : {};
    } catch {
      parsedMeta = {};
    }

    if (!parsedMeta.full_name) {
      return ctx.reply(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–º—è –∏ –§–∞–º–∏–ª–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /verify_me."
      );
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É
    const adminId = parseInt(process.env.ADMIN_ID);
    const clubs = await db("club").select("id", "name");

    const buttons = clubs.map((club) => [
      {
        text: club.name,
        callback_data: `verify_select_club_${userId}_${club.id}`,
      },
    ]);
    buttons.push([
      {text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `verify_decline_${userId}`},
    ]);

    function escapeMarkdownV2(text) {
      return text.replace(/[_*[\]()~`>#+=|{}.!\\]/g, "\\$&");
    }

    try {
      await bot.api.sendMessage(
        adminId,
        `üì• *–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é*\nüë§ Telegram ID: \`${userId}\`\nüìõ –ò–º—è –∏ –§–∞–º–∏–ª–∏—è: *${escapeMarkdownV2(
          fullName
        )}*\nüîπ Username: @${escapeMarkdownV2(
          ctx.from.username || `user_${userId}`
        )}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—É–±, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`,
        {
          parse_mode: "MarkdownV2",
          reply_markup: {inline_keyboard: buttons},
        }
      );

      // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É ‚Üí —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        `‚úÖ –°–ø–∞—Å–∏–±–æ, *${fullName}*.\nüïì –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
        {parse_mode: "Markdown"}
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:", error);

      // –û—á–∏—â–∞–µ–º meta.full_name
      await db("users")
        .where({id: userId})
        .update({
          meta: JSON.stringify({}),
        });

      await ctx.reply(
        "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /verify_me."
      );
    }

    //
  });
};

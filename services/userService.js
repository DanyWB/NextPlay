const db = require("./db");

async function createUserIfNotExists(id, username) {
  const safeUsername = username || `user_${id}`;
  const user = await db("users").where({id}).first();

  if (!user) {
    await db("users").insert({
      id,
      username: safeUsername,
      is_admin: false,
      created_at: new Date().toISOString(),
    });
    console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${safeUsername}`);
  } else if (user.username !== safeUsername) {
    await db("users").where({id}).update({username: safeUsername});
    console.log(`üîÑ Username –æ–±–Ω–æ–≤–ª—ë–Ω: ${user.username} ‚Üí ${safeUsername}`);
  }
}
async function getUserById(id) {
  return db("users").where({id}).first();
}
async function getUnverifiedUsers() {
  return await db("users").whereNull("athlete_id");
}

async function getAllClubs() {
  return await db("club").select("id", "name");
}

async function setAdmin(id, username = null) {
  const safeUsername = username || `user_${id}`;
  const user = await db("users").where({id}).first();

  if (!user) {
    await db("users").insert({
      id,
      username: safeUsername,
      is_admin: true,
      created_at: new Date().toISOString(),
    });
    console.log(`üëë –ê–¥–º–∏–Ω ${safeUsername} —Å–æ–∑–¥–∞–Ω`);
  } else if (!user.is_admin) {
    await db("users").where({id}).update({is_admin: true});
    console.log(`üëë –ê–¥–º–∏–Ω ${safeUsername} –æ–±–Ω–æ–≤–ª—ë–Ω`);
  }
}

async function verifyUser(id, athlete_id) {
  await db("users").where({id}).update({
    athlete_id,
    verified_at: new Date().toISOString(),
  });
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Å athlete_id ${athlete_id}`);
}

async function unlinkUserFromAthlete(userId) {
  await db("users").where({id: userId}).update({
    athlete_id: null,
  });
}

async function isAdmin(id) {
  const user = await db("users").where({id}).first();
  return user?.is_admin == true;
}

async function isVerified(id) {
  const user = await db("users").where({id}).first();
  return !!user?.athlete_id;
}

async function getUser(id) {
  return await db("users").where({id}).first();
}

async function getUserByAthleteId(athleteId) {
  return await db("users").where({athlete_id: athleteId}).first();
}

async function declineUser(bot, telegramId) {
  try {
    await bot.api.sendMessage(
      telegramId,
      "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    );
  } catch (err) {
    console.warn(
      `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`,
      err.message
    );
  }
}

async function getLinkedUsers() {
  return await db("users").select("id", "username").whereNotNull("athlete_id");
}

module.exports = {
  createUserIfNotExists,
  getUnverifiedUsers,
  getUserById,
  setAdmin,
  verifyUser,
  isAdmin,
  isVerified,
  getUser,
  getAllClubs,
  getUserByAthleteId,
  declineUser,
  unlinkUserFromAthlete,
  getLinkedUsers,
};
